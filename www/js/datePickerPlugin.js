/**
 * Phonegap DatePicker Plugin Copyright (c) Greg Allen 2011 MIT Licensed
 * Reused and ported to Android plugin by Daniel van 't Oever
 */
var DatePicker = function (plugin, require, exports, module) {
	
	
		var exec = require("cordova/exec");

	/**
	 * Constructor
	 */
	function DatePicker() {
		this._callback;
	}

	/**
	 * show - true to show the ad, false to hide the ad
	 */
	DatePicker.prototype.show = function(options, cb) {
		if (options.date) {
			options.date = (options.date.getMonth() + 1) + "/" + (options.date.getDate()) + "/" + (options.date.getFullYear()) + "/"
					+ (options.date.getHours()) + "/" + (options.date.getMinutes());
		}
		var defaults = {
			mode : '',
			date : '',
			allowOldDates : true
		};

		for ( var key in defaults) {
			if (typeof options[key] !== "undefined")
				defaults[key] = options[key];
		}
		this._callback = cb;

		return exec(cb, failureCallback, 'DatePickerPlugin', defaults.mode, new Array(defaults));
	};

	DatePicker.prototype._dateSelected = function(date) {
		var d = new Date(parseFloat(date) * 1000);
		if (this._callback)
			this._callback(d);
	};

	function failureCallback(err) {
		console.log("datePickerPlugin.js failed: " + err);
	}

	/**
     * Load DatePicker
     */
    /*gap.addConstructor(function () {
        if (gap.addPlugin) {
            gap.addPlugin("datePicker", DatePicker);
        } else {
            if (!window.plugins) {
                window.plugins = {};
            }

            window.plugins.datePicker = new DatePicker();
       }
    );*/



	
	var datePicker = new DatePicker();
	module.exports = datePicker;
	
};




//cordova.define(	'cordova/plugin/datePickerPlugin',	function() {    
cordova.define(	'cordova/plugin/datePickerPlugin',	function(require, exports, module) {    
	DatePicker('com.phonegap.hello_world.datePickerPlugin', require, exports, module);
});

var datePickerPlugin = cordova.require('cordova/plugin/datePickerPlugin');

$(function() {
	
	console.log('load');
	
	    $('.nativedatepicker').focus(function(event) {
	    	console.log('focus');
        var currentField = $(this);
        var myNewDate = Date.parse(currentField.val()) || new Date();

        var datePickerPlugin = cordova.require('cordova/plugin/datePickerPlugin');

        datePickerPlugin.show({
            date : myNewDate,
            mode : 'date', // date or time or blank for both
            allowOldDates : true
        }, function(returnDate) {
        		console('return');
            var newDate = new Date(returnDate);
            currentField.val(newDate.toString("dd/MMM/yyyy"));

            // This fixes the problem you mention at the bottom of this script with it not working a second/third time around, because it is in focus.
            currentField.blur();
        });
    });

    $('.nativetimepicker').focus(function(event) {
        var currentField = $(this);
        var time = currentField.val();
        var myNewTime = new Date();

        myNewTime.setHours(time.substr(0, 2));
        myNewTime.setMinutes(time.substr(3, 2));

        // Same handling for iPhone and Android
        
        
        var datePickerPlugin = cordova.require('cordova/plugin/datePickerPlugin');

        datePickerPlugin.show({
            date : myNewTime,
            mode : 'time', // date or time or blank for both
            allowOldDates : true
        }, function(returnDate) {
          // returnDate is generated by .toLocaleString() in Java so it will be relative to the current time zone
            var newDate = new Date(returnDate);
            currentField.val(newDate.toString("HH:mm"));

            currentField.blur();
        });
    });
    
});
